- (-) *Piping* (inspired by Julia)
-- (x) `value |> func_1 |> func_2`  becomes `func_2(func_1(value))`
-- (x) `value .|> func_1 |> func_2`  becomes `func_2(func_1.(value))` (broadcast)
-- (x) `value ..|> func_1 |> func_2`  becomes `func_2(func_1..(value))` (key+value broadcast)
-- ( ) `value -<|> func_1 |> func_2`  becomes `func_2(func_1-<(value))` (filter) [syntax needs reconsideration]
-- ( ) `value -<<|> func_1 |> func_2`  becomes `func_2(func_1-<<(value))` (key+value filter) [syntax needs reconsideration]

- ( ) *Quick table.unpack*
-- ( ) `t.{}` becomes `table.unpack(t)`
-- ( ) `t.{i?, j?}` becomes `table.unpack(t, i, j)`

- ( ) *Function templates*
-- ( ) `<func>($, 42, $)`   becomes `(x, y) -> func(x, 42, y)`
-- ( ) `<func>($2, 42, $1)` becomes `(x, y) -> func(y, 42, x)`
-- ( ) `<func>($2)`         becomes `(_, x) -> func(x)`
   %Indexing stays inside the angle brackets so `<someTable.func>($, 42, $)` becomes `(x, y) -> someTable.func(x, 42, y)`%
   %Same rules as above for methods but with some slight changes:%
-- ( ) `<someTable:func>($, 42, $)`  becomes `(x, y) -> someTable:func(x, 42, y)`
-- ( ) `<someTable::func>($, 42, $)` becomes `(self, x, y) -> someTable.func(self, x, 42, y)`

- ( ) *Short-circuit condition as if statement* (inspired by Shell)
-- ( ) `condition && statement` becomes `if (condition) statement`
-- ( ) `condition || statement` becomes `if (!condition) statement`
-- ( ) Chainable

- ( ) *String interpolation*
-- ( ) `"string $var"` inserts var
-- ( ) `"string ${var}"` does the same, but the curly braces can separate var name from text after and can use format placeholders
--- ( ) `"string ${var:.16f}"` to supply format placeholder (`.16f` as example)
-- ( ) `"string $(expr)"` can insert an expression
--- ( ) `"string $(expr:.16f)"` to supply format placeholder (`.16f` as example)
-- ( ) *Only allowed in double-quoted strings*

- ( ) -For loop sugars- [syntax needs reconsideration]
-- ( ) `for (v:t)` where `t` is an identifier or table literal becomes `for _, v in pairs(t)`
-- ( ) `for (k, v :: t)` where `t` is an identifier or table literal becomes `for k, v in pairs(t)`
-- ( ) `for (i, v ::: t)` where `t` is an identifier or table literal becomes `for i, v in ipairs(t)`
-- ( ) `for (i, k, v :: t)` where `t` is an identifier or table literal becomes `for k, v in pairs(t)`
   and keeps a counter of how many values have been iterated over so far in the variable `i`
