* ( ) Function templates
  - `<func>($, 42, $)`    becomes `(x, y) -> func(x, 42, y)`
  - `<func>($2, 42, $1)`  becomes `(x, y) -> func(y, 42, x)`
  - `<func>($2)`          becomes `(_, x) -> func(x)`

  Indexing stays inside the angle brackets so `<someTable.func>($, 42, $)` becomes `(x, y) -> someTable.func(x, 42, y)`

  Same rules as above for methods but with some slight changes:

  - `<someTable:func>($, 42, $)`   becomes `(x, y) -> someTable:func(x, 42, y)`
  - `<someTable::func>($, 42, $)`   becomes `(self, x, y) -> someTable.func(self, x, 42, y)`

* ( ) Calling a string literal becomes string.format
  `'a fmtstr with a number %d'(42)` becomes `string.format('a fmtstr with a number %d', 42)`

* ( ) For loop sugars
  - `for (v:t)` where `t` is an identifier or table literal becomes `for _, v in pairs(t)`
  - `for (k, v :: t)` where `t` is an identifier or table literal becomes `for k, v in pairs(t)`
  - `for (i, v ::: t)` where `t` is an identifier or table literal becomes `for i, v in ipairs(t)`
  - `for (i, k, v :: t)` where `t` is an identifier or table literal becomes `for k, v in pairs(t)`
    and keeps a counter of how many values have been iterated over so far in the variable `i`

* ( ) Piping (inspired by Julia)
  - `value |> func_1 |> func_2`  becomes `func_2(func_1(value))`
  - `value .|> func_1 |> func_2`  becomes `func_2(func_1.(value))` (broadcast)
  - `value ..|> func_1 |> func_2`  becomes `func_2(func_1..(value))` (key+value broadcast)
  - `value -<|> func_1 |> func_2`  becomes `func_2(func_1-<(value))` (filter)
  - `value -<<|> func_1 |> func_2`  becomes `func_2(func_1-<<(value))` (key+value filter)

* ( ) Quick table.unpack
  `t.{i?, j?}` becomes `table.unpack(t, i?, j?)` (or `unpack` instead of `table.unpack` depending on Lua target version)

* (-) Quick table.concat
  - `t +++ delim` becomes `table.concat(t, delim)`
  - `t +++ {delim?, i?, j?}` becomes `table.concat(t, delim?, i?, j?)`
